{"ast":null,"code":"var _jsxFileName = \"/Users/nickscomputer/Desktop/Summer 2024/Revamped Website/personal-website/src/Components/PageManager.jsx\",\n  _s = $RefreshSig$();\nimport IconColumn from './IconColumn.jsx';\nimport NavBar from './Utils/NavBar.jsx';\nimport WindowManager from './WindowManager.jsx';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PageManager() {\n  _s();\n  const [openingDisplay, setOpeningDisplay] = useState(true);\n  const [projectsDisplay, setProjectsDisplay] = useState(true);\n  const [experienceDisplay, setExperienceDisplay] = useState(true);\n  const [snakeDisplay, setSnakeDisplay] = useState(false);\n  const [mineSweeperDisplay, setMineSweeperDisplay] = useState(false);\n  const [the2048Display, setthe2048Display] = useState(false);\n  const displays = [openingDisplay, projectsDisplay, snakeDisplay, mineSweeperDisplay, the2048Display, experienceDisplay];\n  const setDisplays = [setOpeningDisplay, setProjectsDisplay, setSnakeDisplay, setMineSweeperDisplay, setthe2048Display, setExperienceDisplay];\n  const [frameWidth, setFrameWidth] = useState(window.innerWidth);\n  const colorList = [\"bg-neutral-500\", \"bg-black-500\", \"bg-red-500\", \"bg-blue-500\", \"bg-green-500\", \"bg-purple-500\"];\n  const [bColor, setBColor] = useState(colorList[Math.trunc(Math.random() * 6)]);\n  useEffect(() => {\n    const handleResize = () => {\n      setFrameWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: `flex flex-col relative h-screen w-screen overflow-x-hidden overflow-y-auto ${bColor} font-mono`,\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      setColor: (setBColor, colorList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex flex-row\",\n      children: [frameWidth > 755 ? /*#__PURE__*/_jsxDEV(IconColumn, {\n        displays: displays,\n        setDisplays: setDisplays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 37\n      }, this) : null, /*#__PURE__*/_jsxDEV(WindowManager, {\n        frameWidth: frameWidth,\n        displays: displays,\n        setDisplays: setDisplays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(PageManager, \"ZWeZSjtB9heH1BsV7IJdsmDpSyg=\");\n_c = PageManager;\nexport default PageManager;\nvar _c;\n$RefreshReg$(_c, \"PageManager\");","map":{"version":3,"names":["IconColumn","NavBar","WindowManager","useState","useEffect","jsxDEV","_jsxDEV","PageManager","_s","openingDisplay","setOpeningDisplay","projectsDisplay","setProjectsDisplay","experienceDisplay","setExperienceDisplay","snakeDisplay","setSnakeDisplay","mineSweeperDisplay","setMineSweeperDisplay","the2048Display","setthe2048Display","displays","setDisplays","frameWidth","setFrameWidth","window","innerWidth","colorList","bColor","setBColor","Math","trunc","random","handleResize","addEventListener","removeEventListener","class","children","setColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nickscomputer/Desktop/Summer 2024/Revamped Website/personal-website/src/Components/PageManager.jsx"],"sourcesContent":["import IconColumn from './IconColumn.jsx'\nimport NavBar from './Utils/NavBar.jsx'\nimport WindowManager from './WindowManager.jsx';\nimport { useState, useEffect } from 'react';\n\nfunction PageManager() {\n    const [openingDisplay, setOpeningDisplay] =  useState(true);\n    const [projectsDisplay, setProjectsDisplay] = useState(true);\n    const [experienceDisplay, setExperienceDisplay] = useState(true);\n    const [snakeDisplay, setSnakeDisplay] = useState(false);\n    const [mineSweeperDisplay, setMineSweeperDisplay] = useState(false);\n    const [the2048Display, setthe2048Display] = useState(false);\n    const displays = [openingDisplay, projectsDisplay, snakeDisplay, mineSweeperDisplay, the2048Display, experienceDisplay];\n    const setDisplays = [setOpeningDisplay, setProjectsDisplay, setSnakeDisplay, setMineSweeperDisplay, setthe2048Display, setExperienceDisplay];\n\n    const [frameWidth, setFrameWidth] = useState(window.innerWidth);\n    const colorList = [\"bg-neutral-500\", \"bg-black-500\", \"bg-red-500\", \"bg-blue-500\", \"bg-green-500\", \"bg-purple-500\"];\n    const [bColor, setBColor] = useState(colorList[Math.trunc(Math.random() * 6)]);\n    useEffect(() => {\n        const handleResize = () => {\n            setFrameWidth(window.innerWidth);\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return (\n        <div class={`flex flex-col relative h-screen w-screen overflow-x-hidden overflow-y-auto ${bColor} font-mono`}>\n            <NavBar setColor={setBColor, colorList} />\n            <div class=\"flex flex-row\">\n                {frameWidth > 755 ? <IconColumn displays={displays} setDisplays={setDisplays} /> : null}\n                <WindowManager frameWidth={frameWidth} displays={displays} setDisplays={setDisplays} />\n            </div>\n        </div>\n    )\n}\n\nexport default PageManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}