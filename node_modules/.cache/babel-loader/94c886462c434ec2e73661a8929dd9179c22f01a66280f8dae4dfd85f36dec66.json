{"ast":null,"code":"export default function StartMineSweeper(container) {\n  //Game Info\n  const EASY = {\n    height: 8,\n    width: 15,\n    mines: 24\n  };\n  const NORMAL = {\n    height: 16,\n    width: 30,\n    mines: 99\n  };\n  const HARD = {\n    height: 24,\n    width: 45,\n    mines: 222\n  };\n  let difficulty = {};\n  const boardHeight = 512;\n  const boardWidth = 300;\n  let mineLocations = [];\n  let firstClick = true;\n  let gameOver = false;\n  let win = false;\n  let flags = 0;\n  let totalSelected = 0;\n  //html objects\n  const gameContainer = document.querySelector(\".game-container-mine\");\n  const resetButton = document.querySelector(\".reset-btn\");\n  const diffSelector = document.querySelector(\".diff-change\");\n  const flagDisplay = document.querySelector(\".flag-tracker\");\n  const instructionsDisplay = document.querySelector(\".instructions\");\n  const instructionsText = document.querySelector(\".instructions-text\");\n\n  //Resets variables to starting values and removes all blocks\n  function clearBoard() {\n    mineLocations = [];\n    firstClick = true;\n    gameOver = false;\n    totalSelected = 0;\n    const blocks = document.querySelectorAll(\".block\");\n    blocks.forEach(block => {\n      gameContainer.removeChild(block);\n    });\n  }\n\n  //Sets gameOver to true and selects all bombs while altering any\n  //wrongly placed flags\n  function gameOverEvent() {\n    const bombs = document.querySelectorAll(\".bomb\");\n    const flagged = document.querySelectorAll(\".flagged\");\n    bombs.forEach(bomb => {\n      if (!bomb.classList.contains(\"flagged\")) {\n        bomb.style.backgroundColor = \"red\";\n      }\n    });\n    flagged.forEach(flag => {\n      if (!flag.classList.contains(\"bomb\")) {\n        flag.textContent = \"X\";\n        flag.style.backgroundColor = \"red\";\n      }\n    });\n    gameOver = true;\n    console.log(\"The game has ended\");\n  }\n\n  //Sets win to true, clears the board and has a message.\n  function winEvent() {\n    clearBoard();\n    gameContainer.innerHTML = \"YOU WIN !\";\n  }\n\n  //Returns a block's surrounding blocks and updates its amount\n  //of bombs around or flags around\n  function getBlocksAround(block, className) {\n    const blocksAround = [];\n    let totalBombsAround = 0;\n    let totalFlagsAround = 0;\n    let blockRow = Number(block.id.split(\"_\")[1]);\n    let blockCol = Number(block.id.split(\"_\")[2]);\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        let row = blockRow + i;\n        let column = blockCol + j;\n        if (!(i == 0 && j == 0) && !(row < 0 || column < 0) && !(row >= difficulty.height || column >= difficulty.width)) {\n          const blockID = `#_${row}_${column}`;\n          const otherBlock = document.querySelector(blockID);\n          if (className == \"bomb\" && otherBlock.classList.contains(\"bomb\")) {\n            totalBombsAround++;\n          } else if (className == \"flagged\" && otherBlock.classList.contains(\"flagged\")) {\n            totalFlagsAround++;\n          }\n          blocksAround.push(otherBlock);\n        }\n      }\n    }\n    if (className == \"bomb\") {\n      return [totalBombsAround, blocksAround];\n    } else if (className == \"flagged\") {\n      return [totalFlagsAround, blocksAround];\n    }\n  }\n\n  //Selects the block and, if no bombs around, selects surrounding blocks\n  function selectBlock(block) {\n    let blocksAround = [];\n    let totalBombsAround = 0;\n    if (!block.classList.contains(\"selected\") && !block.classList.contains(\"flagged\")) {\n      if (block.classList.contains(\"bomb\")) {\n        gameOverEvent();\n      } else {\n        totalSelected++;\n        block.classList.add(\"selected\");\n        const bombsAndBlocks = getBlocksAround(block, \"bomb\");\n        totalBombsAround = bombsAndBlocks[0];\n        blocksAround = bombsAndBlocks[1];\n        if (totalBombsAround > 0) {\n          block.innerHTML = `${totalBombsAround}`;\n        } else {\n          blocksAround.forEach(blockAround => selectBlock(blockAround));\n        }\n      }\n    }\n    console.log(totalSelected);\n    console.log(difficulty.height * difficulty.width - difficulty.mines);\n    if (totalSelected == difficulty.height * difficulty.width - difficulty.mines) {\n      winEvent();\n    }\n  }\n\n  //Generates new board with new block positions (no bombs till first click).\n  function generateNewBoard() {\n    //Clearing old blocks and resetting flag count\n    clearBoard();\n    flags = difficulty.mines;\n    flagDisplay.textContent = `Flags Left: ${flags}`;\n    //Adding new blocks to the board\n    const h = boardHeight / difficulty.height - 4;\n    const w = boardWidth / difficulty.width - 4;\n    for (let r = 0; r < difficulty.height; r++) {\n      for (let c = 0; c < difficulty.width; c++) {\n        createAndAddNewBlock(r, c, h, w);\n      }\n    }\n  }\n\n  //Determines bomb positions after first click (1 block radius safe zone\n  //around first click).\n  function determineAndPlaceBombs(safeSpots) {\n    //Getting total amount of mines and potentials spots.\n    let totalMines = difficulty.mines;\n    let totalSpots = difficulty.height * difficulty.width;\n    for (let i = 0; i < totalMines; i++) {\n      const newSpot = Math.trunc(Math.random() * totalSpots);\n      if (mineLocations.includes(newSpot)) {\n        //No repeats, if the mine was already chosen then it can't be again.\n        i--;\n      } else {\n        //Adds location to the associated array, gets the new points on the board and \n        //adds the bomb id to the given block.\n        mineLocations.push(newSpot);\n        const row = Math.trunc(newSpot / difficulty.width);\n        const column = Math.trunc(newSpot % difficulty.width);\n        const newID = `#_${row}_${column}`;\n        if (!safeSpots.includes(newID)) {\n          const bombBlock = document.querySelector(newID);\n          bombBlock.classList.add(\"bomb\");\n        } else {\n          i--;\n        }\n      }\n    }\n    mineLocations.sort();\n  }\n\n  //Adds block event listeners\n  function addEventListeners(block) {\n    //Right Click flags or unflags a block\n    block.addEventListener('contextmenu', e => {\n      e.preventDefault();\n      if (!gameOver && !block.classList.contains(\"selected\")) {\n        if (block.classList.contains(\"flagged\")) {\n          block.classList.remove(\"flagged\");\n          flags++;\n        } else if (flags != 0) {\n          block.classList.add(\"flagged\");\n          flags--;\n        }\n        flagDisplay.textContent = `Flags Left: ${flags}`;\n      }\n    }, false);\n    //Clicking selects spot or starts game \n    block.addEventListener('click', () => {\n      if (!block.classList.contains(\"flagged\") && !gameOver) {\n        if (firstClick) {\n          let safeRow = Number(block.id.split(\"_\")[1]);\n          let safeColumn = Number(block.id.split(\"_\")[2]);\n          const safeSpots = [];\n          for (let r = -1; r <= 1; r++) {\n            for (let c = -1; c <= 1; c++) {\n              safeSpots.push(`#_${safeRow + r}_${safeColumn + c}`);\n            }\n          }\n          determineAndPlaceBombs(safeSpots);\n          firstClick = false;\n        }\n        selectBlock(block);\n      }\n    });\n    //Dbl Clicking reveals all the adjacent blocks if the correct amount of flags are placed\n    block.addEventListener('dblclick', () => {\n      if (block.classList.contains(\"selected\") && !gameOver) {\n        const flagsAndBlocks = getBlocksAround(block, \"flagged\");\n        let numFlagsAround = flagsAndBlocks[0];\n        let blocksAround = flagsAndBlocks[1];\n        if (numFlagsAround == Number(block.textContent)) {\n          blocksAround.forEach(blockAround => selectBlock(blockAround));\n        }\n      }\n    });\n  }\n\n  //Generates a new block at a new position with associated dimensions.\n  function createAndAddNewBlock(row, column, height, width) {\n    //Creating the new block and establishing style and dimensions.\n    const newBlock = document.createElement('div');\n    newBlock.style.cssText = `width: ${width}px; height: ${height}px; line-height: ${height}px;`;\n    newBlock.classList.add(\"block\");\n    const newID = `_${row}_${column}`;\n    newBlock.setAttribute('id', newID);\n    //Adding new event listeners for the block\n    addEventListeners(newBlock);\n    //Append new block to the gamecontainer\n    gameContainer.appendChild(newBlock);\n  }\n\n  //Resets board\n  function reset() {\n    switch (diffSelector.value) {\n      case \"EASY\":\n        difficulty = EASY;\n        break;\n      case \"NORMAL\":\n        difficulty = NORMAL;\n        break;\n      case \"HARD\":\n        difficulty = HARD;\n        break;\n    }\n    clearBoard();\n    gameContainer.innerHTML = \"\";\n    generateNewBoard();\n  }\n  if (container) {\n    //Establishes reset button event \n    resetButton.addEventListener('click', reset);\n\n    //Establishes instructions button event\n    instructionsDisplay.addEventListener('click', () => {\n      instructionsText.classList.toggle(\"hidden\");\n    });\n\n    //Default starting values and generates first game\n    difficulty = NORMAL;\n    generateNewBoard();\n  }\n}\n_c = StartMineSweeper;\nvar _c;\n$RefreshReg$(_c, \"StartMineSweeper\");","map":{"version":3,"names":["StartMineSweeper","container","EASY","height","width","mines","NORMAL","HARD","difficulty","boardHeight","boardWidth","mineLocations","firstClick","gameOver","win","flags","totalSelected","gameContainer","document","querySelector","resetButton","diffSelector","flagDisplay","instructionsDisplay","instructionsText","clearBoard","blocks","querySelectorAll","forEach","block","removeChild","gameOverEvent","bombs","flagged","bomb","classList","contains","style","backgroundColor","flag","textContent","console","log","winEvent","innerHTML","getBlocksAround","className","blocksAround","totalBombsAround","totalFlagsAround","blockRow","Number","id","split","blockCol","i","j","row","column","blockID","otherBlock","push","selectBlock","add","bombsAndBlocks","blockAround","generateNewBoard","h","w","r","c","createAndAddNewBlock","determineAndPlaceBombs","safeSpots","totalMines","totalSpots","newSpot","Math","trunc","random","includes","newID","bombBlock","sort","addEventListeners","addEventListener","e","preventDefault","remove","safeRow","safeColumn","flagsAndBlocks","numFlagsAround","newBlock","createElement","cssText","setAttribute","appendChild","reset","value","toggle","_c","$RefreshReg$"],"sources":["/Users/nickscomputer/Desktop/Summer 2024/Revamped Website/personal-website/src/Components/Files/MineSweeper/minesweeper.js"],"sourcesContent":["export default function StartMineSweeper(container) {\n        //Game Info\n    const EASY = {height: 8, width: 15, mines: 24};\n    const NORMAL = {height: 16, width: 30, mines: 99};\n    const HARD = {height: 24, width: 45, mines: 222};\n    let difficulty = {};\n    const boardHeight = 512;\n    const boardWidth = 300;\n    let mineLocations = [];\n    let firstClick = true;\n    let gameOver = false;\n    let win = false;\n    let flags = 0;\n    let totalSelected = 0;\n    //html objects\n    const gameContainer = document.querySelector(\".game-container-mine\");\n    const resetButton = document.querySelector(\".reset-btn\");\n    const diffSelector = document.querySelector(\".diff-change\");\n    const flagDisplay = document.querySelector(\".flag-tracker\");\n    const instructionsDisplay = document.querySelector(\".instructions\");\n    const instructionsText = document.querySelector(\".instructions-text\");\n\n    //Resets variables to starting values and removes all blocks\n    function clearBoard() {\n        mineLocations = [];\n        firstClick = true;\n        gameOver = false;\n        totalSelected = 0;\n        const blocks = document.querySelectorAll(\".block\");\n        blocks.forEach((block) => {\n            gameContainer.removeChild(block);\n        });\n    }\n\n    //Sets gameOver to true and selects all bombs while altering any\n    //wrongly placed flags\n    function gameOverEvent() {\n        const bombs = document.querySelectorAll(\".bomb\");\n        const flagged = document.querySelectorAll(\".flagged\");\n        bombs.forEach((bomb) => {\n            if (!bomb.classList.contains(\"flagged\")) {\n                bomb.style.backgroundColor = \"red\";\n            }\n        });\n        flagged.forEach((flag) => {\n            if (!flag.classList.contains(\"bomb\")) {\n                flag.textContent = \"X\";\n                flag.style.backgroundColor = \"red\";\n            }\n        });\n        gameOver = true;\n        console.log(\"The game has ended\");\n    }\n\n    //Sets win to true, clears the board and has a message.\n    function winEvent () {\n        clearBoard();\n        gameContainer.innerHTML = \"YOU WIN !\";\n    }\n\n    //Returns a block's surrounding blocks and updates its amount\n    //of bombs around or flags around\n    function getBlocksAround(block, className) {\n        const blocksAround = [];\n        let totalBombsAround = 0;\n        let totalFlagsAround = 0;\n        let blockRow = Number(block.id.split(\"_\")[1]);\n        let blockCol = Number(block.id.split(\"_\")[2]);\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j<= 1; j++) {\n                let row = blockRow + i;\n                let column = blockCol + j;\n                if (!(i == 0 && j == 0) &&\n                    !(row < 0 || column < 0) && \n                    !(row >= difficulty.height || column >= difficulty.width)) {\n                    const blockID = `#_${row}_${column}`;\n                    const otherBlock = document.querySelector(blockID);\n                    if (className == \"bomb\" && otherBlock.classList.contains(\"bomb\")) {\n                        totalBombsAround++;\n                    } else if (className == \"flagged\" && otherBlock.classList.contains(\"flagged\")) {\n                        totalFlagsAround++;\n                    }\n                    blocksAround.push(otherBlock);\n                }\n            }\n        }\n        if (className == \"bomb\") {\n            return [totalBombsAround, blocksAround];\n        } else if (className == \"flagged\") {\n            return [totalFlagsAround, blocksAround];\n        }\n    }\n\n    //Selects the block and, if no bombs around, selects surrounding blocks\n    function selectBlock(block) {\n        let blocksAround = [];\n        let totalBombsAround = 0;\n\n        if (!block.classList.contains(\"selected\") && !block.classList.contains(\"flagged\")) {\n            if (block.classList.contains(\"bomb\")) {\n                gameOverEvent();\n            } else {\n                totalSelected++;\n                block.classList.add(\"selected\");\n                const bombsAndBlocks = getBlocksAround(block, \"bomb\");\n                totalBombsAround = bombsAndBlocks[0];\n                blocksAround = bombsAndBlocks[1];\n                if (totalBombsAround > 0) {\n                    block.innerHTML = `${totalBombsAround}`;\n                } else {\n                    blocksAround.forEach((blockAround) => selectBlock(blockAround));\n                }\n            }\n        }\n        console.log(totalSelected);\n        console.log(difficulty.height * difficulty.width - difficulty.mines);\n        if (totalSelected == difficulty.height * difficulty.width - difficulty.mines) {\n            winEvent();\n        }\n    }\n\n    //Generates new board with new block positions (no bombs till first click).\n    function generateNewBoard() {\n        //Clearing old blocks and resetting flag count\n        clearBoard();\n        flags = difficulty.mines;\n        flagDisplay.textContent = `Flags Left: ${flags}`;\n        //Adding new blocks to the board\n        const h = (boardHeight / difficulty.height) - 4;\n        const w = (boardWidth / difficulty.width) - 4;\n        for (let r = 0; r < difficulty.height; r++) {\n            for (let c = 0; c < difficulty.width; c++) {\n                createAndAddNewBlock(r, c, h, w);\n            }\n        }\n    }\n\n    //Determines bomb positions after first click (1 block radius safe zone\n    //around first click).\n    function determineAndPlaceBombs(safeSpots) {\n        //Getting total amount of mines and potentials spots.\n        let totalMines = difficulty.mines;\n        let totalSpots = difficulty.height * difficulty.width;\n        for (let i = 0; i < totalMines; i++) {\n            const newSpot = Math.trunc(Math.random() * totalSpots);\n            if (mineLocations.includes(newSpot)) {\n                //No repeats, if the mine was already chosen then it can't be again.\n                i--; \n            } else {\n                //Adds location to the associated array, gets the new points on the board and \n                //adds the bomb id to the given block.\n                mineLocations.push(newSpot);\n                const row = Math.trunc(newSpot / difficulty.width);\n                const column = Math.trunc(newSpot % difficulty.width);\n                const newID = `#_${row}_${column}`;\n                if (!safeSpots.includes(newID)) {\n                    const bombBlock = document.querySelector(newID);\n                    bombBlock.classList.add(\"bomb\");\n                } else {\n                    i--;\n                }\n            }\n        }\n        mineLocations.sort();\n    }\n\n    //Adds block event listeners\n    function addEventListeners(block) {\n        //Right Click flags or unflags a block\n        block.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            if (!gameOver && !block.classList.contains(\"selected\")) {\n                if (block.classList.contains(\"flagged\")) {\n                    block.classList.remove(\"flagged\");\n                    flags++;\n                } else if (flags != 0) {\n                    block.classList.add(\"flagged\");\n                    flags--;\n                }\n                flagDisplay.textContent = `Flags Left: ${flags}`;\n            }\n        }, false);\n        //Clicking selects spot or starts game \n        block.addEventListener('click', () => {\n            if (!block.classList.contains(\"flagged\") && !gameOver) {\n                if (firstClick) {\n                    let safeRow = Number(block.id.split(\"_\")[1]);\n                    let safeColumn = Number(block.id.split(\"_\")[2]);\n                    const safeSpots = [];\n                    for (let r = -1; r <= 1; r++) {\n                        for (let c = -1; c <= 1; c++) {\n                            safeSpots.push(`#_${safeRow + r}_${safeColumn + c}`);\n                        }\n                    }\n                    determineAndPlaceBombs(safeSpots);\n                    firstClick = false;\n                } \n                selectBlock(block);\n            }\n        });\n        //Dbl Clicking reveals all the adjacent blocks if the correct amount of flags are placed\n        block.addEventListener('dblclick', () => {\n            if (block.classList.contains(\"selected\") && !gameOver) {\n                const flagsAndBlocks = getBlocksAround(block, \"flagged\");\n                let numFlagsAround = flagsAndBlocks[0];\n                let blocksAround = flagsAndBlocks[1];\n                if (numFlagsAround == Number(block.textContent)) {\n                    blocksAround.forEach((blockAround) => selectBlock(blockAround));\n                }\n            }\n        });\n    }\n\n    //Generates a new block at a new position with associated dimensions.\n    function createAndAddNewBlock(row, column, height, width) {\n        //Creating the new block and establishing style and dimensions.\n        const newBlock = document.createElement('div');\n        newBlock.style.cssText = `width: ${width}px; height: ${height}px; line-height: ${height}px;`;\n        newBlock.classList.add(\"block\");\n        const newID = `_${row}_${column}`\n        newBlock.setAttribute('id', newID);\n        //Adding new event listeners for the block\n        addEventListeners(newBlock);\n        //Append new block to the gamecontainer\n        gameContainer.appendChild(newBlock);\n    }\n\n    //Resets board\n    function reset() {\n        switch(diffSelector.value) {\n            case \"EASY\":\n                difficulty = EASY;\n                break;\n            case \"NORMAL\":\n                difficulty = NORMAL;\n                break;\n            case \"HARD\":\n                difficulty = HARD;\n                break;\n        }\n        clearBoard();\n        gameContainer.innerHTML = \"\";\n        generateNewBoard();\n    }\n\n    if (container) {\n        //Establishes reset button event \n        resetButton.addEventListener('click', reset);\n\n        //Establishes instructions button event\n        instructionsDisplay.addEventListener('click', () => {\n            instructionsText.classList.toggle(\"hidden\");\n        });\n\n        //Default starting values and generates first game\n        difficulty = NORMAL;\n        generateNewBoard();\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}