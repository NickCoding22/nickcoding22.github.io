{"ast":null,"code":"export default function StartSnake(container) {\n  let board = [];\n  let boardSize = 21;\n  let boardDimension = 540;\n  let direction = \"ArrowRight\";\n  let leadIndex = [];\n  let appleIndex = [];\n  let gameStart = false;\n  let gameID = \"\";\n  let score = 0;\n  let snakes = [];\n  let snakeColor = \"white\";\n  let directionChosen = \"false\";\n  const gameContainer = document.querySelector('.game-container');\n  const scoreBoard = document.querySelector('.score-window');\n  const boardSizeSelector = document.querySelector('.board-change');\n  const speedSelector = document.querySelector('.speed-change');\n  const playButton = document.querySelector('#play-button');\n  const colorSelector = document.querySelector('.colors');\n  const colors = [\"black\", \"blue\", \"purple\", \"orange\", \"yellow\", \"brown\", \"green\"];\n  const keyCodes = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n  const keysOpposites = {\n    \"ArrowUp\": \"ArrowDown\",\n    \"ArrowDown\": \"ArrowUp\",\n    \"ArrowLeft\": \"ArrowRight\",\n    \"ArrowRight\": \"ArrowLeft\"\n  };\n  function instantiateBoard() {\n    for (let i = 0; i < boardSize; i++) {\n      const newArray = [];\n      for (let j = 0; j < boardSize; j++) {\n        const newSpot = document.createElement('div');\n        const newDimension = boardDimension / boardSize;\n        newSpot.style.cssText = `width: ${newDimension}px; height: ${newDimension}px;`;\n        newSpot.classList.add('empty-space');\n        newArray.push(newSpot);\n        gameContainer.appendChild(newSpot);\n      }\n      board.push(newArray);\n    }\n  }\n  function instantiateSnake(numBlocks) {\n    const snakeStart = Math.trunc(boardSize / 2);\n    board[snakeStart][snakeStart].classList.add('snake-block');\n    board[snakeStart][snakeStart].style.backgroundColor = snakeColor;\n    snakes.push(board[snakeStart][snakeStart]);\n    leadIndex = [snakeStart, snakeStart];\n    for (let i = 1; i < numBlocks; i++) {\n      board[snakeStart][snakeStart - i].classList.add('snake-block');\n      board[snakeStart][snakeStart - i].style.backgroundColor = snakeColor;\n      snakes.push(board[snakeStart][snakeStart - i]);\n    }\n  }\n  function checkGameOver() {\n    if (leadIndex[0] < 0 || leadIndex[0] > boardSize - 1 || leadIndex[1] < 0 || leadIndex[1] > boardSize - 1 || board[leadIndex[0]][leadIndex[1]].classList.contains('snake-block')) {\n      endGame();\n      return true;\n    }\n  }\n  function randomizeApple() {\n    appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n    console.log(appleIndex);\n    while (board[appleIndex[0]][appleIndex[1]].classList.contains(\"snake-block\")) {\n      appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n    }\n    board[appleIndex[0]][appleIndex[1]].classList.add(\"apple\");\n    board[appleIndex[0]][appleIndex[1]].style.backgroundColor = \"red\";\n  }\n  function checkApple() {\n    return board[leadIndex[0]][leadIndex[1]].classList.contains('apple');\n  }\n  function moveBlocks() {\n    if (direction == \"ArrowRight\") {\n      leadIndex[1] = leadIndex[1] + 1;\n    } else if (direction == \"ArrowLeft\") {\n      leadIndex[1] = leadIndex[1] - 1;\n    } else if (direction == \"ArrowUp\") {\n      leadIndex[0] = leadIndex[0] - 1;\n    } else if (direction == \"ArrowDown\") {\n      leadIndex[0] = leadIndex[0] + 1;\n    }\n    if (!checkGameOver()) {\n      if (!checkApple()) {\n        const lastSnakeBlock = snakes.pop();\n        lastSnakeBlock.classList.remove('snake-block');\n        changeSnakeColor(lastSnakeBlock, \"black\");\n      } else {\n        score++;\n        scoreBoard.textContent = `Score: ${score}`;\n        board[leadIndex[0]][leadIndex[1]].classList.remove('apple');\n        randomizeApple();\n      }\n      board[leadIndex[0]][leadIndex[1]].classList.add('snake-block');\n      changeSnakeColor(board[leadIndex[0]][leadIndex[1]], snakeColor);\n      snakes.unshift(board[leadIndex[0]][leadIndex[1]]);\n    }\n  }\n  function changeSnakeColor(block, color) {\n    block.style.backgroundColor = color;\n  }\n  function startGame() {\n    randomizeApple();\n    gameID = window.setInterval(() => {\n      directionChosen = false;\n      moveBlocks();\n    }, Number(speedSelector.value));\n  }\n  function endGame() {\n    window.clearInterval(gameID);\n    snakes.forEach(snake => changeSnakeColor(snake, \"red\"));\n  }\n  function reset() {\n    boardSize = Number(boardSizeSelector.value);\n    board.forEach(row => {\n      row.forEach(block => {\n        gameContainer.removeChild(block);\n      });\n    });\n    board = [];\n    direction = \"ArrowRight\";\n    leadIndex = [];\n    appleIndex = [];\n    gameStart = false;\n    gameID = \"\";\n    score = 0;\n    snakes = [];\n    instantiateBoard();\n    instantiateSnake(5);\n  }\n  function establishColors() {\n    colors.forEach(color => {\n      const newColor = document.createElement('div');\n      newColor.classList.add(\"color\");\n      newColor.classList.add(color);\n      newColor.style.backgroundColor = color;\n      newColor.addEventListener('click', () => {\n        snakes.forEach(snake => changeSnakeColor(snake, color));\n        snakeColor = color;\n      });\n      colorSelector.appendChild(newColor);\n    });\n  }\n  function keyDownFirst(e) {\n    if (keyCodes.includes(e.code) && keysOpposites[direction] != e.code && !directionChosen) {\n      direction = `${e.code}`;\n    }\n    if (!gameStart) {\n      startGame();\n      gameStart = true;\n    }\n    directionChosen = true;\n  }\n  function keyDownList(e) {\n    if ([\"Space\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1) {\n      e.preventDefault();\n    }\n  }\n  if (container) {\n    container.addEventListener('keydown', keyDownFirst);\n    container.addEventListener(\"keydown\", keyDownList, false);\n    playButton.addEventListener('click', () => reset());\n    establishColors();\n    instantiateBoard();\n    instantiateSnake(5);\n  }\n  return [keyDownFirst, keyDownList];\n}\n_c = StartSnake;\nvar _c;\n$RefreshReg$(_c, \"StartSnake\");","map":{"version":3,"names":["StartSnake","container","board","boardSize","boardDimension","direction","leadIndex","appleIndex","gameStart","gameID","score","snakes","snakeColor","directionChosen","gameContainer","document","querySelector","scoreBoard","boardSizeSelector","speedSelector","playButton","colorSelector","colors","keyCodes","keysOpposites","instantiateBoard","i","newArray","j","newSpot","createElement","newDimension","style","cssText","classList","add","push","appendChild","instantiateSnake","numBlocks","snakeStart","Math","trunc","backgroundColor","checkGameOver","contains","endGame","randomizeApple","random","console","log","checkApple","moveBlocks","lastSnakeBlock","pop","remove","changeSnakeColor","textContent","unshift","block","color","startGame","window","setInterval","Number","value","clearInterval","forEach","snake","reset","row","removeChild","establishColors","newColor","addEventListener","keyDownFirst","e","includes","code","keyDownList","indexOf","preventDefault","_c","$RefreshReg$"],"sources":["/Users/nickscomputer/Desktop/Summer 2024/Revamped Website/personal-website/src/Components/Files/Snake/snake.js"],"sourcesContent":["export default function StartSnake (container) {\n    let board = [];\n    let boardSize = 21;\n    let boardDimension = 540;\n    let direction = \"ArrowRight\";\n    let leadIndex = [];\n    let appleIndex = [];\n    let gameStart = false;\n    let gameID = \"\";\n    let score = 0;\n    let snakes = [];\n    let snakeColor = \"white\";\n    let directionChosen = \"false\";\n    const gameContainer = document.querySelector('.game-container');\n    const scoreBoard = document.querySelector('.score-window');\n    const boardSizeSelector = document.querySelector('.board-change');\n    const speedSelector = document.querySelector('.speed-change');\n    const playButton = document.querySelector('#play-button');\n    const colorSelector = document.querySelector('.colors');\n    const colors = [\"black\", \"blue\", \"purple\", \"orange\", \"yellow\", \"brown\", \"green\"]\n    const keyCodes = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n    const keysOpposites = {\n        \"ArrowUp\": \"ArrowDown\",\n        \"ArrowDown\": \"ArrowUp\",\n        \"ArrowLeft\": \"ArrowRight\",\n        \"ArrowRight\": \"ArrowLeft\"\n    };\n\n    function instantiateBoard() {\n        for (let i = 0; i < boardSize; i++) {\n            const newArray = [];\n            for (let j = 0; j < boardSize; j++) {\n                const newSpot = document.createElement('div');\n                const newDimension = boardDimension / boardSize;\n                newSpot.style.cssText = `width: ${newDimension}px; height: ${newDimension}px;`;\n                newSpot.classList.add('empty-space');\n                newArray.push(newSpot);\n                gameContainer.appendChild(newSpot);\n            }\n            board.push(newArray);\n        }\n    }\n\n    function instantiateSnake(numBlocks) {\n        const snakeStart = Math.trunc(boardSize / 2);\n        board[snakeStart][snakeStart].classList.add('snake-block');\n        board[snakeStart][snakeStart].style.backgroundColor = snakeColor;\n        snakes.push(board[snakeStart][snakeStart]);\n        leadIndex = [snakeStart, snakeStart];\n        for (let i = 1; i < numBlocks; i++) {\n            board[snakeStart][snakeStart - i].classList.add('snake-block');\n            board[snakeStart][snakeStart - i].style.backgroundColor = snakeColor;\n            snakes.push(board[snakeStart][snakeStart - i]);\n        }\n    }\n\n    function checkGameOver() {\n        if (leadIndex[0] < 0 || leadIndex[0] > boardSize - 1 || \n            leadIndex[1] < 0 || leadIndex[1] > boardSize - 1 ||\n            board[leadIndex[0]][leadIndex[1]].classList.contains('snake-block')) {\n            endGame();\n            return true;\n        }\n    }\n\n    function randomizeApple() {\n        appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n        console.log(appleIndex);\n        while (board[appleIndex[0]][appleIndex[1]].classList.contains(\"snake-block\")) {\n            appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n        }\n        board[appleIndex[0]][appleIndex[1]].classList.add(\"apple\");\n        board[appleIndex[0]][appleIndex[1]].style.backgroundColor = \"red\";\n    }\n\n    function checkApple() {\n        return board[leadIndex[0]][leadIndex[1]].classList.contains('apple'); \n    }\n\n    function moveBlocks() {\n        if (direction == \"ArrowRight\") {\n            leadIndex[1] = leadIndex[1] + 1;\n        } else if (direction == \"ArrowLeft\") {\n            leadIndex[1] = leadIndex[1] - 1;\n        } else if (direction == \"ArrowUp\") {\n            leadIndex[0] = leadIndex[0] - 1;\n        } else if (direction == \"ArrowDown\") {\n            leadIndex[0] = leadIndex[0] + 1;\n        }\n        if (!checkGameOver()) {\n            if (!checkApple()) {\n                const lastSnakeBlock = snakes.pop();\n                lastSnakeBlock.classList.remove('snake-block');\n                changeSnakeColor(lastSnakeBlock, \"black\");\n            } else { \n                score++;\n                scoreBoard.textContent = `Score: ${score}`;\n                board[leadIndex[0]][leadIndex[1]].classList.remove('apple')\n                randomizeApple(); \n            }\n            board[leadIndex[0]][leadIndex[1]].classList.add('snake-block');\n            changeSnakeColor(board[leadIndex[0]][leadIndex[1]], snakeColor);\n            snakes.unshift(board[leadIndex[0]][leadIndex[1]]);\n        }\n    }\n\n    function changeSnakeColor(block, color) {\n        block.style.backgroundColor = color;\n    }\n\n    function startGame() {\n        randomizeApple();\n        gameID = window.setInterval(() => {\n            directionChosen = false;\n            moveBlocks();\n        }, Number(speedSelector.value));\n    }\n\n    function endGame() {\n        window.clearInterval(gameID);\n        snakes.forEach((snake) => changeSnakeColor(snake, \"red\"));\n    }\n\n    function reset() {\n        boardSize = Number(boardSizeSelector.value);\n        board.forEach((row) => {\n            row.forEach((block) => {\n                gameContainer.removeChild(block);\n            });\n        });\n        board = [];\n        direction = \"ArrowRight\";\n        leadIndex = [];\n        appleIndex = [];\n        gameStart = false;\n        gameID = \"\";\n        score = 0;\n        snakes = [];\n        instantiateBoard();\n        instantiateSnake(5);\n    }\n\n    function establishColors() {\n        colors.forEach((color) => {\n            const newColor = document.createElement('div');\n            newColor.classList.add(\"color\");\n            newColor.classList.add(color);\n            newColor.style.backgroundColor = color;\n            newColor.addEventListener('click', () => {\n                snakes.forEach((snake) => changeSnakeColor(snake, color));\n                snakeColor = color;\n            });\n            colorSelector.appendChild(newColor);\n        });\n    }\n\n    function keyDownFirst(e) {\n        if (keyCodes.includes(e.code) && \n            keysOpposites[direction] != e.code &&\n            !directionChosen) {\n            direction = `${e.code}`;\n        }\n        if (!gameStart) {\n            startGame();\n            gameStart = true;\n        }\n        directionChosen = true;\n    }\n\n    function keyDownList(e) {\n        if([\"Space\",\"ArrowUp\",\"ArrowDown\",\"ArrowLeft\",\"ArrowRight\"].indexOf(e.code) > -1) {\n            e.preventDefault();\n        }\n    }\n\n    if (container) {\n        container.addEventListener('keydown', keyDownFirst);\n\n        container.addEventListener(\"keydown\", keyDownList, false);\n\n        playButton.addEventListener('click', () => reset());\n        establishColors();\n\n        instantiateBoard();\n        instantiateSnake(5);\n    }\n\n    return [keyDownFirst, keyDownList];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}