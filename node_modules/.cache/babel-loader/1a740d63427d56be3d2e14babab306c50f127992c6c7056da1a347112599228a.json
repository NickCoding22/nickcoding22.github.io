{"ast":null,"code":"let board = [];\nlet boardSize = 21;\nlet boardDimension = 540;\nlet direction = \"ArrowRight\";\nlet leadIndex = [];\nlet appleIndex = [];\nlet gameStart = false;\nlet gameID = \"\";\nlet score = 0;\nlet snakes = [];\nlet snakeColor = \"white\";\nlet directionChosen = \"false\";\nconst gameContainer = document.querySelector('.game-container');\nconst scoreBoard = document.querySelector('.score-window');\nconst boardSizeSelector = document.querySelector('.board-change');\nconst speedSelector = document.querySelector('.speed-change');\nconst playButton = document.querySelector('#play-button');\nconst colorSelector = document.querySelector('.colors');\nconst colors = [\"white\", \"blue\", \"purple\", \"orange\", \"yellow\", \"brown\", \"green\"];\nconst keyCodes = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nconst keysOpposites = {\n  \"ArrowUp\": \"ArrowDown\",\n  \"ArrowDown\": \"ArrowUp\",\n  \"ArrowLeft\": \"ArrowRight\",\n  \"ArrowRight\": \"ArrowLeft\"\n};\nfunction instantiateBoard() {\n  for (let i = 0; i < boardSize; i++) {\n    const newArray = [];\n    for (let j = 0; j < boardSize; j++) {\n      const newSpot = document.createElement('div');\n      const newDimension = boardDimension / boardSize;\n      newSpot.style.cssText = `width: ${newDimension}px; height: ${newDimension}px;`;\n      newSpot.classList.add('empty-space');\n      newArray.push(newSpot);\n      gameContainer.appendChild(newSpot);\n    }\n    board.push(newArray);\n  }\n}\nfunction instantiateSnake(numBlocks) {\n  const snakeStart = Math.trunc(boardSize / 2);\n  board[snakeStart][snakeStart].classList.add('snake-block');\n  board[snakeStart][snakeStart].style.backgroundColor = snakeColor;\n  snakes.push(board[snakeStart][snakeStart]);\n  leadIndex = [snakeStart, snakeStart];\n  for (let i = 1; i < numBlocks; i++) {\n    board[snakeStart][snakeStart - i].classList.add('snake-block');\n    board[snakeStart][snakeStart - i].style.backgroundColor = snakeColor;\n    snakes.push(board[snakeStart][snakeStart - i]);\n  }\n}\nfunction checkGameOver() {\n  if (leadIndex[0] < 0 || leadIndex[0] > boardSize - 1 || leadIndex[1] < 0 || leadIndex[1] > boardSize - 1 || board[leadIndex[0]][leadIndex[1]].classList.contains('snake-block')) {\n    endGame();\n    return true;\n  }\n}\nfunction randomizeApple() {\n  appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n  console.log(appleIndex);\n  while (board[appleIndex[0]][appleIndex[1]].classList.contains(\"snake-block\")) {\n    appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n  }\n  board[appleIndex[0]][appleIndex[1]].classList.add(\"apple\");\n  board[appleIndex[0]][appleIndex[1]].style.backgroundColor = \"red\";\n}\nfunction checkApple() {\n  return board[leadIndex[0]][leadIndex[1]].classList.contains('apple');\n}\nfunction moveBlocks() {\n  if (direction == \"ArrowRight\") {\n    leadIndex[1] = leadIndex[1] + 1;\n  } else if (direction == \"ArrowLeft\") {\n    leadIndex[1] = leadIndex[1] - 1;\n  } else if (direction == \"ArrowUp\") {\n    leadIndex[0] = leadIndex[0] - 1;\n  } else if (direction == \"ArrowDown\") {\n    leadIndex[0] = leadIndex[0] + 1;\n  }\n  if (!checkGameOver()) {\n    if (!checkApple()) {\n      const lastSnakeBlock = snakes.pop();\n      lastSnakeBlock.classList.remove('snake-block');\n      changeSnakeColor(lastSnakeBlock, \"black\");\n    } else {\n      score++;\n      scoreBoard.textContent = `Score: ${score}`;\n      board[leadIndex[0]][leadIndex[1]].classList.remove('apple');\n      randomizeApple();\n    }\n    board[leadIndex[0]][leadIndex[1]].classList.add('snake-block');\n    changeSnakeColor(board[leadIndex[0]][leadIndex[1]], snakeColor);\n    snakes.unshift(board[leadIndex[0]][leadIndex[1]]);\n  }\n}\nfunction changeSnakeColor(block, color) {\n  block.style.backgroundColor = color;\n}\nfunction startGame() {\n  randomizeApple();\n  gameID = window.setInterval(() => {\n    directionChosen = false;\n    moveBlocks();\n  }, Number(speedSelector.value));\n}\nfunction endGame() {\n  window.clearInterval(gameID);\n  snakes.forEach(snake => changeSnakeColor(snake, \"red\"));\n}\nfunction reset() {\n  boardSize = Number(boardSizeSelector.value);\n  board.forEach(row => {\n    row.forEach(block => {\n      gameContainer.removeChild(block);\n    });\n  });\n  board = [];\n  direction = \"ArrowRight\";\n  leadIndex = [];\n  appleIndex = [];\n  gameStart = false;\n  gameID = \"\";\n  score = 0;\n  snakes = [];\n  instantiateBoard();\n  instantiateSnake(5);\n}\nfunction establishColors() {\n  colors.forEach(color => {\n    const newColor = document.createElement('div');\n    newColor.classList.add(\"color\");\n    newColor.classList.add(color);\n    newColor.style.backgroundColor = color;\n    newColor.addEventListener('click', () => {\n      snakes.forEach(snake => changeSnakeColor(snake, color));\n      snakeColor = color;\n    });\n    colorSelector.appendChild(newColor);\n  });\n}\nwindow.addEventListener('keydown', e => {\n  if (keyCodes.includes(e.code) && keysOpposites[direction] != e.code && !directionChosen) {\n    direction = `${e.code}`;\n  }\n  if (!gameStart) {\n    startGame();\n    gameStart = true;\n  }\n  directionChosen = true;\n});\nwindow.addEventListener(\"keydown\", function (e) {\n  if ([\"Space\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1) {\n    e.preventDefault();\n  }\n}, false);\nplayButton.addEventListener('click', () => reset());\nestablishColors();\ninstantiateBoard();\ninstantiateSnake(5);","map":{"version":3,"names":["board","boardSize","boardDimension","direction","leadIndex","appleIndex","gameStart","gameID","score","snakes","snakeColor","directionChosen","gameContainer","document","querySelector","scoreBoard","boardSizeSelector","speedSelector","playButton","colorSelector","colors","keyCodes","keysOpposites","instantiateBoard","i","newArray","j","newSpot","createElement","newDimension","style","cssText","classList","add","push","appendChild","instantiateSnake","numBlocks","snakeStart","Math","trunc","backgroundColor","checkGameOver","contains","endGame","randomizeApple","random","console","log","checkApple","moveBlocks","lastSnakeBlock","pop","remove","changeSnakeColor","textContent","unshift","block","color","startGame","window","setInterval","Number","value","clearInterval","forEach","snake","reset","row","removeChild","establishColors","newColor","addEventListener","e","includes","code","indexOf","preventDefault"],"sources":["/Users/nickscomputer/Desktop/Summer 2024/Revamped Website/personal-website/src/Components/Files/Snake/snake.js"],"sourcesContent":["let board = [];\nlet boardSize = 21;\nlet boardDimension = 540;\nlet direction = \"ArrowRight\";\nlet leadIndex = [];\nlet appleIndex = [];\nlet gameStart = false;\nlet gameID = \"\";\nlet score = 0;\nlet snakes = [];\nlet snakeColor = \"white\";\nlet directionChosen = \"false\";\nconst gameContainer = document.querySelector('.game-container');\nconst scoreBoard = document.querySelector('.score-window');\nconst boardSizeSelector = document.querySelector('.board-change');\nconst speedSelector = document.querySelector('.speed-change');\nconst playButton = document.querySelector('#play-button');\nconst colorSelector = document.querySelector('.colors');\nconst colors = [\"white\", \"blue\", \"purple\", \"orange\", \"yellow\", \"brown\", \"green\"]\nconst keyCodes = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nconst keysOpposites = {\n    \"ArrowUp\": \"ArrowDown\",\n    \"ArrowDown\": \"ArrowUp\",\n    \"ArrowLeft\": \"ArrowRight\",\n    \"ArrowRight\": \"ArrowLeft\"\n};\n\nfunction instantiateBoard() {\n    for (let i = 0; i < boardSize; i++) {\n        const newArray = [];\n        for (let j = 0; j < boardSize; j++) {\n            const newSpot = document.createElement('div');\n            const newDimension = boardDimension / boardSize;\n            newSpot.style.cssText = `width: ${newDimension}px; height: ${newDimension}px;`;\n            newSpot.classList.add('empty-space');\n            newArray.push(newSpot);\n            gameContainer.appendChild(newSpot);\n        }\n        board.push(newArray);\n    }\n}\n\nfunction instantiateSnake(numBlocks) {\n    const snakeStart = Math.trunc(boardSize / 2);\n    board[snakeStart][snakeStart].classList.add('snake-block');\n    board[snakeStart][snakeStart].style.backgroundColor = snakeColor;\n    snakes.push(board[snakeStart][snakeStart]);\n    leadIndex = [snakeStart, snakeStart];\n    for (let i = 1; i < numBlocks; i++) {\n        board[snakeStart][snakeStart - i].classList.add('snake-block');\n        board[snakeStart][snakeStart - i].style.backgroundColor = snakeColor;\n        snakes.push(board[snakeStart][snakeStart - i]);\n    }\n}\n\nfunction checkGameOver() {\n    if (leadIndex[0] < 0 || leadIndex[0] > boardSize - 1 || \n        leadIndex[1] < 0 || leadIndex[1] > boardSize - 1 ||\n        board[leadIndex[0]][leadIndex[1]].classList.contains('snake-block')) {\n        endGame();\n        return true;\n    }\n}\n\nfunction randomizeApple() {\n    appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n    console.log(appleIndex);\n    while (board[appleIndex[0]][appleIndex[1]].classList.contains(\"snake-block\")) {\n        appleIndex = [Math.trunc(Math.random() * boardSize), Math.trunc(Math.random() * boardSize)];\n    }\n    board[appleIndex[0]][appleIndex[1]].classList.add(\"apple\");\n    board[appleIndex[0]][appleIndex[1]].style.backgroundColor = \"red\";\n}\n\nfunction checkApple() {\n    return board[leadIndex[0]][leadIndex[1]].classList.contains('apple'); \n}\n\nfunction moveBlocks() {\n    if (direction == \"ArrowRight\") {\n        leadIndex[1] = leadIndex[1] + 1;\n    } else if (direction == \"ArrowLeft\") {\n        leadIndex[1] = leadIndex[1] - 1;\n    } else if (direction == \"ArrowUp\") {\n        leadIndex[0] = leadIndex[0] - 1;\n    } else if (direction == \"ArrowDown\") {\n        leadIndex[0] = leadIndex[0] + 1;\n    }\n    if (!checkGameOver()) {\n        if (!checkApple()) {\n            const lastSnakeBlock = snakes.pop();\n            lastSnakeBlock.classList.remove('snake-block');\n            changeSnakeColor(lastSnakeBlock, \"black\");\n        } else { \n            score++;\n            scoreBoard.textContent = `Score: ${score}`;\n            board[leadIndex[0]][leadIndex[1]].classList.remove('apple')\n            randomizeApple(); \n        }\n        board[leadIndex[0]][leadIndex[1]].classList.add('snake-block');\n        changeSnakeColor(board[leadIndex[0]][leadIndex[1]], snakeColor);\n        snakes.unshift(board[leadIndex[0]][leadIndex[1]]);\n    }\n}\n\nfunction changeSnakeColor(block, color) {\n    block.style.backgroundColor = color;\n}\n\nfunction startGame() {\n    randomizeApple();\n    gameID = window.setInterval(() => {\n        directionChosen = false;\n        moveBlocks();\n    }, Number(speedSelector.value));\n}\n\nfunction endGame() {\n    window.clearInterval(gameID);\n    snakes.forEach((snake) => changeSnakeColor(snake, \"red\"));\n}\n\nfunction reset() {\n    boardSize = Number(boardSizeSelector.value);\n    board.forEach((row) => {\n        row.forEach((block) => {\n            gameContainer.removeChild(block);\n        });\n    });\n    board = [];\n    direction = \"ArrowRight\";\n    leadIndex = [];\n    appleIndex = [];\n    gameStart = false;\n    gameID = \"\";\n    score = 0;\n    snakes = [];\n    instantiateBoard();\n    instantiateSnake(5);\n}\n\nfunction establishColors() {\n    colors.forEach((color) => {\n        const newColor = document.createElement('div');\n        newColor.classList.add(\"color\");\n        newColor.classList.add(color);\n        newColor.style.backgroundColor = color;\n        newColor.addEventListener('click', () => {\n            snakes.forEach((snake) => changeSnakeColor(snake, color));\n            snakeColor = color;\n        });\n        colorSelector.appendChild(newColor);\n    });\n}\n\nwindow.addEventListener('keydown', (e) => {\n    if (keyCodes.includes(e.code) && \n        keysOpposites[direction] != e.code &&\n        !directionChosen) {\n        direction = `${e.code}`;\n    }\n    if (!gameStart) {\n        startGame();\n        gameStart = true;\n    }\n    directionChosen = true;\n});\n\nwindow.addEventListener(\"keydown\", function(e) {\n    if([\"Space\",\"ArrowUp\",\"ArrowDown\",\"ArrowLeft\",\"ArrowRight\"].indexOf(e.code) > -1) {\n        e.preventDefault();\n    }\n}, false);\n\nplayButton.addEventListener('click', () => reset());\nestablishColors();\n\ninstantiateBoard();\ninstantiateSnake(5);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}